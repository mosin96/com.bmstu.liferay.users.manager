/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bmstu.users.manager.service.base;

import aQute.bnd.annotation.ProviderType;

import com.bmstu.users.manager.model.TraccarUser;
import com.bmstu.users.manager.service.TraccarUserLocalService;
import com.bmstu.users.manager.service.persistence.TraccarUserPersistence;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandler;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerRegistryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Criterion;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Disjunction;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.dao.orm.Property;
import com.liferay.portal.kernel.dao.orm.PropertyFactoryUtil;
import com.liferay.portal.kernel.dao.orm.RestrictionsFactoryUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the traccar user local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.bmstu.users.manager.service.impl.TraccarUserLocalServiceImpl}.
 * </p>
 *
 * @author Mosin
 * @see com.bmstu.users.manager.service.impl.TraccarUserLocalServiceImpl
 * @see com.bmstu.users.manager.service.TraccarUserLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class TraccarUserLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements TraccarUserLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.bmstu.users.manager.service.TraccarUserLocalServiceUtil} to access the traccar user local service.
	 */

	/**
	 * Adds the traccar user to the database. Also notifies the appropriate model listeners.
	 *
	 * @param traccarUser the traccar user
	 * @return the traccar user that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public TraccarUser addTraccarUser(TraccarUser traccarUser) {
		traccarUser.setNew(true);

		return traccarUserPersistence.update(traccarUser);
	}

	/**
	 * Creates a new traccar user with the primary key. Does not add the traccar user to the database.
	 *
	 * @param traccarUserId the primary key for the new traccar user
	 * @return the new traccar user
	 */
	@Override
	public TraccarUser createTraccarUser(long traccarUserId) {
		return traccarUserPersistence.create(traccarUserId);
	}

	/**
	 * Deletes the traccar user with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param traccarUserId the primary key of the traccar user
	 * @return the traccar user that was removed
	 * @throws PortalException if a traccar user with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public TraccarUser deleteTraccarUser(long traccarUserId)
		throws PortalException {
		return traccarUserPersistence.remove(traccarUserId);
	}

	/**
	 * Deletes the traccar user from the database. Also notifies the appropriate model listeners.
	 *
	 * @param traccarUser the traccar user
	 * @return the traccar user that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public TraccarUser deleteTraccarUser(TraccarUser traccarUser) {
		return traccarUserPersistence.remove(traccarUser);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(TraccarUser.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return traccarUserPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.bmstu.users.manager.model.impl.TraccarUserModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return traccarUserPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.bmstu.users.manager.model.impl.TraccarUserModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return traccarUserPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return traccarUserPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return traccarUserPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public TraccarUser fetchTraccarUser(long traccarUserId) {
		return traccarUserPersistence.fetchByPrimaryKey(traccarUserId);
	}

	/**
	 * Returns the traccar user matching the UUID and group.
	 *
	 * @param uuid the traccar user's UUID
	 * @param groupId the primary key of the group
	 * @return the matching traccar user, or <code>null</code> if a matching traccar user could not be found
	 */
	@Override
	public TraccarUser fetchTraccarUserByUuidAndGroupId(String uuid,
		long groupId) {
		return traccarUserPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the traccar user with the primary key.
	 *
	 * @param traccarUserId the primary key of the traccar user
	 * @return the traccar user
	 * @throws PortalException if a traccar user with the primary key could not be found
	 */
	@Override
	public TraccarUser getTraccarUser(long traccarUserId)
		throws PortalException {
		return traccarUserPersistence.findByPrimaryKey(traccarUserId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(traccarUserLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(TraccarUser.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("traccarUserId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(traccarUserLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(TraccarUser.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"traccarUserId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(traccarUserLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(TraccarUser.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("traccarUserId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					Criterion modifiedDateCriterion = portletDataContext.getDateRangeCriteria(
							"modifiedDate");

					Criterion statusDateCriterion = portletDataContext.getDateRangeCriteria(
							"statusDate");

					if ((modifiedDateCriterion != null) &&
							(statusDateCriterion != null)) {
						Disjunction disjunction = RestrictionsFactoryUtil.disjunction();

						disjunction.add(modifiedDateCriterion);
						disjunction.add(statusDateCriterion);

						dynamicQuery.add(disjunction);
					}

					Property workflowStatusProperty = PropertyFactoryUtil.forName(
							"status");

					if (portletDataContext.isInitialPublication()) {
						dynamicQuery.add(workflowStatusProperty.ne(
								WorkflowConstants.STATUS_IN_TRASH));
					}
					else {
						StagedModelDataHandler<?> stagedModelDataHandler = StagedModelDataHandlerRegistryUtil.getStagedModelDataHandler(TraccarUser.class.getName());

						dynamicQuery.add(workflowStatusProperty.in(
								stagedModelDataHandler.getExportableStatuses()));
					}
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<TraccarUser>() {
				@Override
				public void performAction(TraccarUser traccarUser)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						traccarUser);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(TraccarUser.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return traccarUserLocalService.deleteTraccarUser((TraccarUser)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return traccarUserPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the traccar users matching the UUID and company.
	 *
	 * @param uuid the UUID of the traccar users
	 * @param companyId the primary key of the company
	 * @return the matching traccar users, or an empty list if no matches were found
	 */
	@Override
	public List<TraccarUser> getTraccarUsersByUuidAndCompanyId(String uuid,
		long companyId) {
		return traccarUserPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of traccar users matching the UUID and company.
	 *
	 * @param uuid the UUID of the traccar users
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of traccar users
	 * @param end the upper bound of the range of traccar users (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching traccar users, or an empty list if no matches were found
	 */
	@Override
	public List<TraccarUser> getTraccarUsersByUuidAndCompanyId(String uuid,
		long companyId, int start, int end,
		OrderByComparator<TraccarUser> orderByComparator) {
		return traccarUserPersistence.findByUuid_C(uuid, companyId, start, end,
			orderByComparator);
	}

	/**
	 * Returns the traccar user matching the UUID and group.
	 *
	 * @param uuid the traccar user's UUID
	 * @param groupId the primary key of the group
	 * @return the matching traccar user
	 * @throws PortalException if a matching traccar user could not be found
	 */
	@Override
	public TraccarUser getTraccarUserByUuidAndGroupId(String uuid, long groupId)
		throws PortalException {
		return traccarUserPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the traccar users.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.bmstu.users.manager.model.impl.TraccarUserModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of traccar users
	 * @param end the upper bound of the range of traccar users (not inclusive)
	 * @return the range of traccar users
	 */
	@Override
	public List<TraccarUser> getTraccarUsers(int start, int end) {
		return traccarUserPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of traccar users.
	 *
	 * @return the number of traccar users
	 */
	@Override
	public int getTraccarUsersCount() {
		return traccarUserPersistence.countAll();
	}

	/**
	 * Updates the traccar user in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param traccarUser the traccar user
	 * @return the traccar user that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public TraccarUser updateTraccarUser(TraccarUser traccarUser) {
		return traccarUserPersistence.update(traccarUser);
	}

	/**
	 * Returns the traccar user local service.
	 *
	 * @return the traccar user local service
	 */
	public TraccarUserLocalService getTraccarUserLocalService() {
		return traccarUserLocalService;
	}

	/**
	 * Sets the traccar user local service.
	 *
	 * @param traccarUserLocalService the traccar user local service
	 */
	public void setTraccarUserLocalService(
		TraccarUserLocalService traccarUserLocalService) {
		this.traccarUserLocalService = traccarUserLocalService;
	}

	/**
	 * Returns the traccar user persistence.
	 *
	 * @return the traccar user persistence
	 */
	public TraccarUserPersistence getTraccarUserPersistence() {
		return traccarUserPersistence;
	}

	/**
	 * Sets the traccar user persistence.
	 *
	 * @param traccarUserPersistence the traccar user persistence
	 */
	public void setTraccarUserPersistence(
		TraccarUserPersistence traccarUserPersistence) {
		this.traccarUserPersistence = traccarUserPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.bmstu.users.manager.model.TraccarUser",
			traccarUserLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.bmstu.users.manager.model.TraccarUser");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return TraccarUserLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return TraccarUser.class;
	}

	protected String getModelClassName() {
		return TraccarUser.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = traccarUserPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = TraccarUserLocalService.class)
	protected TraccarUserLocalService traccarUserLocalService;
	@BeanReference(type = TraccarUserPersistence.class)
	protected TraccarUserPersistence traccarUserPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}